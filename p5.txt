 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?

	954 paquetes.

 ** ¿Cuánto tiempo dura la captura?

	56,15 segundos.	

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

	En la máquina con dirección IP 192.168.1.34. Por que esta dirección IP pertenece a la clase C por lo 		tanto es una dirección privada. Por lo tanto la captura se ha tenido que realizar entre la máquina y 		un router NAT.

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.

 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?

	El porcentaje mayor es el de paquetes UDP. Si esto es consistente puesto que el protocolo UDP es 	indicado para el transporte de datos de este tipo de aplicaciones. En cambio el protocolo TCP solo lo 		utilizaremos para mensajes de control de dicha aplicaciones.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
	
	IPv4, DNS, SIP, RTP, RTCP,HTTP, ICMP, ARP, H.261.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.

 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

	Desde el segundo 7,34 hasta el segundo 55.85. En los siguientes intervalos:

		Del segundo 7 al segundo 9 aprox
		Del segundo 14 al segundo 17,5 aprox
		Del segundo 37,5 al segundo 40 aprox
		Del segundo 55 al segundo 55.5 aprox

 ** Y los paquetes con RTP, ¿cuándo se envían?
	Desde el segundo 17,17 hasta el segundo 38,11 con los siguientes intervalos:

		Del segundo 17 al segundo 22 aprox
		Del segundo 23 al segundo 39 aprox

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.

 ** ¿Qué servicio es el utilizado en estas tramas?
	
	Servicio DNS

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

	Dirección IP del servidor de nombres: 80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

	Dirección IP del nombre ekiga.net : 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

	No sabemos muy bien por que el programa ekiga realiza una resolución inversa al servidor DNS el cual 		este rechaza ya que no admite este tipo de peticiones

6. A continuación, hay más de una docena de tramas TCP/HTTP.

 ** ¿Podrías decir la URL que se está pidiendo?

	URI pedida: http://ekiga.net/ip/
	
 ** ¿Qué user agent (UA) la está pidiendo?

	Ekiga	

 ** ¿Qué devuelve el servidor?

	Devuelve un mensaje HTTP de con el códico de respuesta 200 OK y la dirección IP del la URI pedida: 		83.36.48.212

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

	Es un servicio de la aplicación Ekiga a través de su pagina web que te devuelve tu propia IP 		pública. Esto es muy util cuando nos encontramos tras un NAT puesto que en esa situación conocemos 		nuestra IP privada pero no la pública.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.

 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

	Es un servicio que nos permite conocer si estamos detrás de un NAT y si lo estamos, detrás de que 		tipo de NAT estamos

 ** ¿Estamos tras un NAT?

	Si puesto que la dirección que nos ofrece no es la misma que la IP de enlace (privada).

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para loc2alizar usuarios.

 ** ¿Qué dirección IP tiene el servidor Registrar?

	Dirección IP 86.64.162.35

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

	Puerto: 5060

 ** ¿Qué método SIP utiliza el UA para registrarse?

	REGISTER

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

	Métodos permitidos: Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:

 ** ¿Se registra con éxito en el primer intento?

	No, puesto que el servidor ekiga responde con un mensaje de error: 401 Unauthorizred

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
	
	Lo sabemos fijandonos en el mensaje de respuesta del Servidor tras la petición REGISTER. Si este 	 mensaje no es 200 OK, no se habrá realizado correctamente.

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

	En el primer mensaje, el cual es rechazado, falta el campo AUTHORIZATION que si esta en el siguiente 		REGISTER, el cual es aceptado

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

	3600 segundos.

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.

 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

	Si, en el campo FROM. Nombre: Gregorio Robles Dirección SIP: grex@ekiga.net

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

	Protocolo SDP. Contiene todo los datos para describir la sesion, todos los formatos que soporta el 		que envia el INVITE.

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

	No, puesto que le mensaje de respuesta solicita una autenticaciión del proxy.

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

	El segundo INVITE contiene el campo PROXY-AUTHORIZATION

11. Una vez conectado, estudia el intercambio de tramas.

 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

	Protocolo RTP, con codec H.261 y T.711 para el audio, por lo que se esta produciendo una conexión de 		audio y video entre los usuarios y RTCP.

	Protocolo RTCP sirve para el control del flujo RTP.

 ** ¿Cuál es el tamaño de paquete de los mismos?
	
	RTP : 214 bytes
	H.261 : 1018 o 407 bytes

 ** ¿Se utilizan bits de padding?

	No utilizamos bits de Padding: (PADDING = FALSE)

 ** ¿Cuál es la periodicidad de los paquetes que se envían?

	AUDIO: G.711

	RTP = 20 ms 
	RTCP = 5s
	
	VIDEO: H.261

	No significativo.

 ** ¿Cuántos bits/segundo estamos enviando?
	
	64000 bits/segundo

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?

	 Existen dos flujos RTP que pertenecen a la misma conversación, un de ellos con 		el 		codec H261 para el video de la conversación y otro con el codec G711 para el audio.

 ** ¿Cuántos paquetes se pierden?

	0% paquetes perdidos.

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

	Valor máximo de delta = 1290.48 ms. Es el retardo máximo entre la llegada de dos paquetes.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

	Jitter Maximo:
		Audio: 119.64 ms
		Video: 183.10 ms
	Jitter Medio:
		Audio: 42.50 ms
		Video: 153.24 ms


	No puesto que al analizar la gráfica de llegada de paquetes de la conexión, esperariamos ver una 	forma mucho más constante,en cambio vemos muchos picos y variaciones muy grandes.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
	
	Los valores de Delta y Jitter son 0.

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

	No por que no sabemos que ha pasado antes de la captura.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

	Hasta el paquete 246 incluido los valores de jitter son menores a 10 ms. 

 ** ¿A qué se debe el cambio tan brusco del jitter?

	A que el siguiente paquete llega con mucho retardo con respecto al paquete anterior debido a algun 		hecho puntual.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

	Si puesto que el Jitter aumenatará cuando el tiempo delta crezca.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

	La dependencia es directa. El Jitter aumentará como respuesta a un aumento en el valor de delta
	(tiempo transcurrido entre un paquete y el siguiente)
	

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?

	Stop Time - Start Time >> 39.2296 - 14.42267 = 24.80 seg
	
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

	Números de paquetes SSRC : 196 y 611 ( Porque existen dos fuentes diferentes que componen RTP, uno 		de audio y otra de video ).

	No hay CSRCs puesto que no existe ningun mezclador, los dos flujos viajan por separado.

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?

	Método SIP: BYE.

 ** ¿En qué trama(s)?

	Tramas 924,925,927 y 933

 ** ¿Por qué crees que se envía varias veces?

	Para evitar que se puedan perder través de la red y por que queremos acabar en ese momento con la 		conversación sin esperar al código de respuesta 200 OK del otro usuario

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?

	Es el mensaje que manda el cliente para cerrar sesion en el servidor de ekiga. Para ello manda el 		campo Expires con valor 0.
	
 ** ¿En qué trama sucede esto?
		
	Tramas 950 y 952.

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

	En el campo Expires. En los Register utilizados para cerrar sesión este campo lleva el valor 0.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?

	Si. Los mensajes STUN sirven para saber si estamos detrás de un NAT y si es así de que tipo que es. 		Y los mensajes de DNS sirven para conocer las IP de los dominios que pedimos.

 ** ¿Son diferentes el registro y la descripción de la sesión?

	El registro es igual pero la descripción de la sesión no.

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?

	Dos flujos, ambos de audio.

 ** ¿Cuál es su periodicidad?

	La periocidad 20 ms, puesto que la cantidad de datos en cada paquete no cambia.
	
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
	
	El valor máximo de delta: 161.05 ms
	El valor máximo del jitter: 30.91 ms
	El valor medio del jitter: 8.22 ms

 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.

	Para reproducir el contenido de la conversación a través de wireshark, iremos a la opcion Telephony >
	RTP > Stream Analysis > Player. Vemos que efectivamente con un jitter demasiado bajo, la calidad de 		la conversación cae.


 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?

	Un servicio de Musica streamig, una radio o algo similar.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
